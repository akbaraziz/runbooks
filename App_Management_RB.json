{"status":{},"contains_secrets":false,"product_version":"3.0.0.0","spec":{"description":"","resources":{"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"AppActionApiCall"},{"kind":"app_task","name":"MailTask"}],"name":"c7d4a955_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"AppActionApiCall"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"MailTask"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"AppActionApiCall","attrs":{"exit_status":[],"script":"\npc_ip = '@@{PC_IP}@@'\nusername = 'admin'\nusername_secret = '@@{PC_Password}@@'\n\nheaders = {'content-type': 'application\/json'}\npayload = { \"kind\": \"app\",\"length\": 250 }\nTimeout=40\n\ndef get_resp(url,payload,method):\n  print(url)\n  resp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n  )\n  json_resp = {}\n  if resp.ok:\n    print(\"Response Ok for: \",url)\n    json_resp = json.loads(resp.content)\n    if \"apps\/list\" in url and json_resp['metadata']['total_matches'] == 0:  \n        print(\"Could not find any entry \")\n    elif \"apps\/list\" in url and json_resp['metadata']['total_matches'] > 1:\n        print(\"Warning : Found Multiple entries\")\n  else:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n  return json_resp\n\n#\"filter_criteria\": \"marketplace_item_type_list==APP;(app_state==PUBLISHED,app_state==ACCEPTED)\"\n#\"filters\": {    \"entity_ids\": app_dict.keys() }\n#'filter' : 'source_marketplace_name==Postgres*'\n#name==Runbook_PG1\nrunlog_dict={}\nAppList=''\nif 'ALL' in '@@{AppList}@@'.upper():\n  AppListurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/list\".format(pc_ip)\n  json_resp = get_resp(AppListurl,payload,'POST')\n  for each_ent in json_resp['entities']:\n    if \"@@{App_Type}@@\".lower() in each_ent['status']['resources']['source_marketplace_name'].lower():\n      AppList+=each_ent['metadata']['name']+','\n  AppList=AppList[:-1].split(',')\nelse:\n  AppList=\"\"\"@@{AppList}@@\"\"\".split(',')\nprint(AppList)\nfor app in AppList:\n  \n  payload[\"filter\"] = 'name==%s'%app.strip()  \n  AppListurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/list\".format(pc_ip)\n  json_resp = get_resp(AppListurl,payload,'POST')\n  app_uuid = json_resp['entities'][0]['metadata']['uuid']\n  print(app_uuid)\n\n  appurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/\".format(pc_ip)+app_uuid\n  del payload['filter']\n  json_resp = get_resp(appurl,payload,'GET')\n  print([x['name'] for x in json_resp[\"spec\"][\"resources\"][\"action_list\"]])\n  #action_id_list= [x for x in json_resp[\"spec\"][\"resources\"][\"action_list\"] if x[\"name\"].lower() == \"\"\"@@{App_action}@@\"\"\".strip().lower()]\n  #action_id=action_id_list[0][\"uuid\"]\n  #print(action_id)\n  \n  del json_resp['status']\n  json_resp['spec'] = { \"target_kind\": \"Application\", \"target_uuid\": app_uuid }\n  #appactionurl = appurl + \"\/actions\/\"+action_id+\"\/run\"\n  appactionurl = appurl + \"\/actions\/run\"\n  data={\n    \"args\": [],\n    \"name\": \"\"\"@@{App_action}@@\"\"\".strip()\n  }\n  if \"\"\"@@{App_action}@@\"\"\".strip().lower() == \"backup\":\n    data['args'] = [{\"name\": \"BACKUP_FILE_PATH\",\"value\": \"~\/db.backup\"}, {\"name\": \"DB_NAME\",\"value\": \"postgres\"}]\n  #json_resp = get_resp(appactionurl,json_resp,'POST')\n  json_resp = get_resp(appactionurl,data,'POST')\n  runlog_uuid = json_resp['runlog_uuid']\n  runlog_dict[app]=[app_uuid, runlog_uuid]\n  \nprint(\"=========================================================\")\n\nOutput_var=\"\"\"<html><head><style>\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n<\/style><\/head>\n<body>\n<h3 align=\"center\">@@{App_action}@@ activity for @@{App_Type}@@ databases <\/h3>\n<table><tr bgcolor='grey' style='text-align:center'><td>AppName<\/td><td>Activity<\/td><td>Status<\/td><\/tr>\"\"\"\ndel payload['kind']\nsleep(Timeout)\nFstatus={}\nfor app in runlog_dict:\n    app_uuid = runlog_dict[app][0]\n    runlog_uuid = runlog_dict[app][1]\n    runlogurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/\".format(pc_ip)+ app_uuid + '\/app_runlogs\/'+runlog_uuid\n    json_resp = get_resp(runlogurl,payload,'GET')\n    Fstatus[app]=json_resp['status']['state']\n    if json_resp['status']['state'].lower() !=\"success\":\n      Output_var+=\"<tr ><td>%s<\/td><td>@@{App_Type}@@ @@{App_action}@@<\/td><td bgcolor='lightblue'>%s(Timeout=%s sec)<\/td><\/tr>\"%(app,json_resp['status']['state'],Timeout)\n    else:\n      if \"@@{App_action}@@\"==\"HealthCheck\":\n        runlogurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/\".format(pc_ip)+ app_uuid + '\/app_runlogs\/list'\n        payload[\"filter\"] = 'root_reference==%s'%runlog_uuid.strip()\n        #del payload['kind']\n        json_resp = get_resp(runlogurl,payload,'POST')\n        taskuuid= [ x['metadata']['uuid'] for x in json_resp['entities'] if 'task_reference' in x['status']][0]\n        print(\"taskuuid is: \", taskuuid)\n        \n        runlogurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/\".format(pc_ip)+ app_uuid + '\/app_runlogs\/'+taskuuid +'\/output'\n        json_resp = get_resp(runlogurl,payload,'GET')\n        Inner_Output_var = \"<table>\"+json_resp['status']['output_list'][0]['output'].split('Output_var=')[-1] + \"<\/table>\"\n        Output_var+=\"<tr><td>%s<\/td><td>@@{App_Type}@@ @@{App_action}@@<\/td><td>%s<\/td><\/tr>\"%(app,Inner_Output_var)\n      else:\n        Output_var+=\"<tr><td>%s<\/td><td>@@{App_Type}@@ @@{App_action}@@<\/td><td>%s<\/td><\/tr>\"%(app,json_resp['status']['state'])\nOutput_var+=\"<\/table><\/body><\/html>\"\nOutput_var=Output_var.replace('\\n','').replace(\"'\",'\"')\nprint(Output_var)\n\nprint(\"========================Final Output=====================\")\nprint(\"InputStr=\"+Output_var)\nexit(0)","eval_variables":["InputStr"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_endpoint","name":"MailEP"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"MailTask","attrs":{"script":"echo \"Hi,\n\nPFA runbook report.\n\nThanks & Regards,\nNucalm-Devops\" > \/tmp\/test2.txt\n\necho '@@{InputStr}@@' > \/tmp\/Rb_report.html\n\nsudo mail -s \"Runbook Report @@{calm_now}@@\" -a \/tmp\/Rb_report.html @@{Mail_ID}@@  < \/tmp\/test2.txt","type":"","command_line_args":"","exit_status":[],"script_type":"sh"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"51cca649_runbook","main_task_local_reference":{"kind":"app_task","name":"c7d4a955_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Mail_ID","value":"alekh.neema@nutanix.com","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"localhost","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"App_action","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\npc_ip = '@@{PC_IP}@@'\nusername = 'admin'\nusername_secret = '@@{PC_Password}@@'\n\nheaders = {'content-type': 'application\/json'}\npayload = { \"kind\": \"app\",\"length\": 250 }\nTimeout=40\n\ndef get_resp(url,payload,method):\n  resp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n  )\n  json_resp = {}\n  if resp.ok:\n    #print(\"Response Ok for: \",url)\n    json_resp = json.loads(resp.content)\n    if \"apps\/list\" in url and json_resp['metadata']['total_matches'] == 0:  \n        print(\"Could not find any entry \")\n  else:\n    print(\"Request failed\")\n  return json_resp\n\n#\"filter_criteria\": \"marketplace_item_type_list==APP;(app_state==PUBLISHED,app_state==ACCEPTED)\"\n#\"filters\": {    \"entity_ids\": app_dict.keys() }\n#'filter' : 'source_marketplace_name==Postgres*'\n#name==Runbook_PG1\nrunlog_dict={}\nAppListurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/list\".format(pc_ip)\njson_resp = get_resp(AppListurl,payload,'POST')\n\nfor each_ent in json_resp['entities']:\n  if \"@@{App_Type}@@\".lower() in each_ent['status']['resources']['source_marketplace_name'].lower():\n    app=each_ent['metadata']['name']\n    break\n\npayload[\"filter\"] = 'name==%s'%app.strip()\n\nAppListurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/list\".format(pc_ip)\njson_resp = get_resp(AppListurl,payload,'POST')\napp_uuid = json_resp['entities'][0]['metadata']['uuid']\n\nappurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/\".format(pc_ip)+app_uuid\ndel payload['filter']\njson_resp = get_resp(appurl,payload,'GET')\nrestrict_dict={\n  'default': ['action_create'],\n  'dba':['Backup', 'Restore', 'action_create','action_delete', 'action_soft_delete']\n,\n  'backup':[ 'action_create', 'action_start', 'action_restart', 'action_stop', 'action_delete', 'action_soft_delete']\n\n}\naction_list=list(set([x['name'] for x in json_resp[\"spec\"][\"resources\"][\"action_list\"]])-set(restrict_dict['default']))\nprint(\",\".join(action_list))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"EXEC_LOCAL","name":"AppList","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"#script\n# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2020\/01\/22\n# task_name:      CalmGetApp\n# description:    This script gets the list of application instances from Calm.\n# TODO: test\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{PC_IP}@@'\nusername = 'admin'\nusername_secret = '@@{PC_Password}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application\/json'}\n# endregion\n\n# region REST call: Get Apps\n#\"filter_criteria\": \"marketplace_item_type_list==APP;(app_state==PUBLISHED,app_state==ACCEPTED)\"\n#\"filters\": {    \"entity_ids\": app_dict.keys() }\n#'filter' : 'source_marketplace_name==Postgres*'\n#name==Runbook_PG1\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/api\/nutanix\/v3\/apps\/list\".format(pc_ip)\npayload = {\n    \"kind\": \"app\",\n    \"length\": 250     \n}\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    if json_resp['metadata']['total_matches'] == 0:  \n        print(\"Could not find any apps.\")\n        exit(1)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n#if \"Postgres\" in \"@@{App_Type}@@\":\n#  mpiname=\"postgres\"\n#else:\n#  mpiname=\"mysql\"\nApp_name=\"\"\nfor each_ent in json_resp['entities']:\n  if \"@@{App_Type}@@\".lower() in each_ent['status']['resources']['source_marketplace_name'].lower():\n    App_name+=each_ent['metadata']['name']+','\nprint('ALL,'+App_name[:-1])\n\n\nexit(0)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"(MPI options can be added here)","data_type":"BASE","type":"LOCAL","name":"App_Type","value":"Postgres","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Postgres","Windows IIS"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"PC_Password","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"App_Management_RB"},"api_version":"3.0","metadata":{"last_update_time":"1593697300790466","kind":"runbook","spec_version":8,"creation_time":"1592905250919417","name":"App_Management_RB"}}